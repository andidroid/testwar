name: Java CI Pipeline

on:
  push:
    branches:
      - "master"
      - "feature/**"
      - "releases/**"
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Cache Maven packages
        uses: actions/cache@v4
        env:
          cache-name: cache-maven-modules
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and Test
        run: mvn -B -U clean package -s settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: testwar-artifact
          path: target/testwar.war

  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Cache Maven packages
        uses: actions/cache@v4
        env:
          cache-name: cache-maven-modules
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Tests
        run: mvn -B test -s settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  verify:
    name: Integrationtest
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Cache Maven packages
        uses: actions/cache@v4
        env:
          cache-name: cache-maven-modules
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Integration Tests
        run: mvn -B verify -Dgroups="MicroShedTest" -DexcludedGroups="IntegrationTest,SmokeTest,LoadTest"

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: testwar-artifact
          path: testwar.war
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Publish package
        run: mvn deploy -DskipTests=true -s settings.xml
        # run: mvn deploy:deploy-file -Dfile=testwar.war -s settings.xml -Durl=https://maven.pkg.github.com/andidroid/testwar -DpomFile=pom.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  flyway:
    name: Flyway Database Migration Test
    needs: build
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Cache Maven packages
        uses: actions/cache@v4
        env:
          cache-name: cache-maven-modules
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Run Flyway Migration
        run: mvn flyway:migrate
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432

  check:
    name: OWASP and License Check
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Cache Maven packages
        uses: actions/cache@v4
        env:
          cache-name: cache-maven-check-modules
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: License check
        run: mvn -B license:add-third-party
      - name: OWASP Dependency check
        run: mvn -B dependency-check:aggregate

  sonar:
    needs: build
    name: Sonar check
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        env:
          cache-name: cache-sonar-packages
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        env:
          cache-name: cache-maven-modules
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn package org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -DskipTests=true -Dsonar.projectKey=andidroid_testwar -Dsonar.organization=andidroid -Dsonar.host.url=https://sonarcloud.io

  site:
    name: Site Generation
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Cache Maven packages
        uses: actions/cache@v4
        env:
          cache-name: cache-maven-site-modules
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Site Generation
        run: mvn -B site site:stage -s settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Site Upload
        run: |
          git config --global user.name github-actions
          git config --global user.email github-actions@github.com
          mvn -B scm-publish:publish-scm -s $GITHUB_WORKSPACE/settings.xml -Dscmpublish.skipCheckin=true
          cd target/scmpublish-checkout
          git add .
          git commit -m"update github pages with maven site"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/upload-artifact@v4
        with:
          name: site-artifact
          path: target/site/

  docker:
    name: Docker
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Cache Maven packages
        uses: actions/cache@v4
        env:
          cache-name: cache-maven-modules
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ env.cache-name }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: resolve maven dependencies
        run: mvn dependency:resolve -s settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #      - uses: actions/download-artifact@v4
      #        with:
      #          name: testwar-artifact
      #          path: target/testwar.war
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set up JDK 17 for deploy to GitHub Container Registry
        uses: actions/setup-java@v4.2.1
        with:
          java-version: "17"
          distribution: "temurin"
          server-id: ghcr.io
          settings-path: ${{ github.workspace }}
      - name: Publish to GitHub Container Registry
        run: mvn package jib:build -Djib.to.image=ghcr.io/andidroid/testwar -Djib.from.image=ghcr.io/andidroid/testhollowjar:latest -DskipTests=true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker_old:
    name: Docker old
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: testwar-artifact
          path: target/testwar.war
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          file: ./Dockerfile
          context: .
          push: true
          pull: true
          tags: ghcr.io/andidroid/testwar_old:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint:
    name: Linter
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Super-Linter
        uses: github/super-linter@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
